#!/usr/bin/env bash
set -euo pipefail

# x-generate-nginx-confs.sh
# - Reads ./conf.yml (new schema only) and generates:
#   * ./dnsmasq.d/dns-hosts (one line mapping all hosts to the internal NGINX IP)
#   * ./conf-nginx/*.conf per host using ./nginx.tmpl.conf and its backend IP
# - No legacy schema support.

ROOT_DIR="$(cd "$(dirname "$0")" && pwd)"
cd "$ROOT_DIR"

CONF_YML="${ROOT_DIR}/conf.yml"
NGINX_TEMPLATE="${ROOT_DIR}/nginx.tmpl.conf"
NGINX_OUT_DIR="${ROOT_DIR}/conf-nginx"
DNS_HOSTS_FILE="${ROOT_DIR}/dnsmasq.d/dns-hosts"

if [[ ! -f "$CONF_YML" ]]; then
  echo "[x-gen-nginx] ERROR: conf.yml not found at $CONF_YML" >&2
  exit 1
fi

if [[ ! -f "$NGINX_TEMPLATE" ]]; then
  echo "[x-gen-nginx] ERROR: nginx template not found at $NGINX_TEMPLATE" >&2
  exit 1
fi

mkdir -p "$NGINX_OUT_DIR"
# Clean previous generated files (only .conf files we own)
# Preserve pinned/manual configs like 00-*.conf (e.g., 00-tuning.conf) by excluding them from deletion
find "$NGINX_OUT_DIR" -type f -name "*.conf" ! -name "00-*" -delete 2>/dev/null || true

# Parse file: for each line with an IP and one or more hostnames
# We build mapping host->ip (last write wins if duplicates)
# Internal NGINX container IP (static default)
NGINX_IP="172.31.200.3"

# Extract "<ip>|<host>" pairs from conf.yml (new schema only)
read_pairs() {
  awk '
    BEGIN { host=""; ip=""; in_ips=0 }
    /^[[:space:]]*#/ { next }
    /^[[:space:]]*$/ { next }

    # Schema: host: <name>
    /host:[[:space:]]*/ {
      line=$0; sub(/#.*/,"",line); split(line,a,":"); host=a[2]; gsub(/^[[:space:]]+|[[:space:]]+$/,"",host);
      in_ips=0; ip=""; next
    }
    # Schema: ips:
    /ips:[[:space:]]*$/ { in_ips=1; next }
    # First list entry is used for backend mapping
    in_ips && /^[[:space:]]*-[[:space:]]*/ {
      val=$0; sub(/^[[:space:]]*-[[:space:]]*/,"",val); gsub(/^[[:space:]]+|[[:space:]]+$/,"",val);
      if (ip=="" && host!="") { ip=val; if (ip!="") { print ip "|" host } }
      next
    }
  ' "$CONF_YML" | sed '/^[[:space:]]*$/d'
}

PAIRS=()
if command -v mapfile >/dev/null 2>&1; then
  mapfile -t PAIRS < <(read_pairs)
else
  while IFS= read -r __line; do
    [[ -n "$__line" ]] && PAIRS+=("$__line")
  done < <(read_pairs)
fi

if [[ ${#PAIRS[@]} -eq 0 ]]; then
  echo "[x-gen-nginx] ERROR: No targets parsed from conf.yml. Check the file format (targets[].host, targets[].ips)." >&2
  exit 1
fi

# 1) Write dns-hosts with a single line mapping to NGINX_IP
TMP_HOSTS=$(mktemp)
trap 'rm -f "$TMP_HOSTS"' EXIT
for p in "${PAIRS[@]}"; do
  printf "%s\n" "${p#*|}" >> "$TMP_HOSTS"
done
ALL_HOSTS=( $(cat "$TMP_HOSTS" | sort -u) )

mkdir -p "$(dirname "$DNS_HOSTS_FILE")"
{
  echo "# dns-hosts"
  echo "# Auto-generated by x-generate-nginx-confs.sh from conf.yml"
  echo "# All hosts map to the internal NGINX IP; NGINX proxies to real backends."
  echo
  printf "%s" "$NGINX_IP"
  for h in "${ALL_HOSTS[@]}"; do
    printf " %s" "$h"
  done
  printf "\n"
} > "$DNS_HOSTS_FILE"
echo "[x-gen-nginx] Wrote ${DNS_HOSTS_FILE} with ${#ALL_HOSTS[@]} hostnames -> ${NGINX_IP}"

# 2) Generate per-host NGINX configs (last pair wins by overwriting)
for p in "${PAIRS[@]}"; do
  ip="${p%%|*}"; host="${p#*|}"
  out="${NGINX_OUT_DIR}/${host//[^A-Za-z0-9._-]/_}.conf"
  sed -e "s#__SERVER_NAME__#${host//\/\\}#g" \
      -e "s#__BACKEND_IP__#${ip//\/\\}#g" \
      "$NGINX_TEMPLATE" > "$out"
  echo "[x-gen-nginx] NGINX: $host -> https://$ip (${out})"
done

count=$(ls -1 "$NGINX_OUT_DIR"/*.conf 2>/dev/null | wc -l | tr -d ' ')
echo "[x-gen-nginx] Generated $count NGINX server configs in $NGINX_OUT_DIR"

exit 0

# Generate a file per host using the external template
for host in "${!MAP[@]}"; do
  ip="${MAP[$host]}"
  # Safe filename: replace non-alnum with _
  fname="${host//[^A-Za-z0-9._-]/_}.conf"
  # Read template and replace placeholders
  sed \
    -e "s#__SERVER_NAME__#${host//\/\\/}#g" \
    -e "s#__BACKEND_IP__#${ip//\/\\/}#g" \
    "$NGINX_TEMPLATE" > "${NGINX_OUT_DIR}/${fname}"
  echo "[x-gen-nginx] Wrote ${NGINX_OUT_DIR}/${fname} -> https://${ip}"
done

echo "[x-gen-nginx] Generated $(ls -1 ${NGINX_OUT_DIR}/*.conf 2>/dev/null | wc -l | tr -d ' ') server configs in ${NGINX_OUT_DIR}."